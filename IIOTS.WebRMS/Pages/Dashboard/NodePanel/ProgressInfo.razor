@using System.ComponentModel
@using AntDesign.TableModels
@using IMEC.WebRMS.Services
@using IIOTS.Models
@using IIOTS.Util
@using IIOTS.WebRMS.Models
@using MQTTnet
@using MQTTnet.Protocol
@inject IMqttClientService MqttClientService
@inject IFreeSql freeSql
@inject ModalService modalService
@inject NavigationManager NavigationManager
@implements IDisposable

@page "/ProgressInfo/{edgeId}"

@code {
    [Parameter]
    public string edgeId { get; set; }
    /// <summary>
    ///初始化
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await GetPage();
        MqttClientService.ApplicationMessageReceived += ApplicationMessageReceived;
        MqttClientService.Subscribe(new MqttTopicFilterBuilder()
       .WithTopic($"EdgeLoginInfo/{edgeId}")
       .WithQualityOfServiceLevel(MqttQualityOfServiceLevel.ExactlyOnce)
       .Build());
        await InvokeAsync(() => base.StateHasChanged());
        await base.OnInitializedAsync();
    }
    private EdgeLoginInfo edgeLoginInfo { get; set; } = new();
    private async void ApplicationMessageReceived(string topic, string msg)
    {
        edgeLoginInfo = msg.ToObject<EdgeLoginInfo>();
        await InvokeAsync(() => base.StateHasChanged());
    }
    public void Dispose()
    {
        MqttClientService.ApplicationMessageReceived -= ApplicationMessageReceived;
        MqttClientService.UnSubscribe($"EdgeLoginInfo/{edgeId}");
        MqttClientService.Dispose();
        GC.SuppressFinalize(this);
    }
    private List<ProgressConfigEntity> progressConfigEntities = new List<ProgressConfigEntity>();
    #region 页面展示
    int _pageIndex = 1;
    int _pageSize = 10;
    long _total = 0;
    bool tableLoad = true;
    /// <summary>
    /// 页面刷新
    /// </summary>
    private async Task GetPage()
    {
        tableLoad = true;
        progressConfigEntities = await freeSql
        .Select<ProgressConfigEntity>()
        .Where(p => p.Gname == edgeId)
        .Count(out _total)
        .Page(_pageIndex, _pageSize)
        .ToListAsync();
        tableLoad = false;
    }
    /// <summary>
    /// 获取启动时间
    /// </summary>
    /// <param name="progressConfig"></param>
    /// <returns></returns>
    private string GetStartTime(ProgressConfigEntity progressConfig)
    {
        return (edgeLoginInfo
        .ProgressLoginInfos
        .Find(p => p.ClientId == $"{progressConfig.Id}_{progressConfig.ClientType}")?.StartTime ?? DateTime.MinValue)
        .ToString();
    }
    /// <summary>
    /// 更新进程状态
    /// </summary>
    /// <param name="progressConfig"></param>
    /// <returns></returns>
    private void UpdateIsUse(ProgressConfigEntity progressConfig, bool isUse)
    {  
        progressConfig.IsUse = isUse;
        if (isUse)
        {
            ReStartProgress(progressConfig); 
        }
        else
        {
            RemoveProgress(progressConfig);
        }
        freeSql
        .Update<ProgressConfigEntity>()
        .Where(p => p.Id == progressConfig.Id)
        .Set(p => p.IsUse, isUse)
        .ExecuteAffrows();

    }
    #endregion
    #region 删除弹窗
    /// <summary>
    /// 删除进程
    /// </summary>
    /// <param name="progressConfig"></param>
    /// <returns></returns>
    private async Task Detect(ProgressConfigEntity progressConfig)
    {
        var DeleteProgressConfigAffrows = await freeSql
         .Delete<ProgressConfigEntity>(progressConfig)
         .ExecuteAffrowsAsync();
        if (DeleteProgressConfigAffrows > 0)
        {
            RemoveProgress(progressConfig);
            await GetPage();
        }
    }
    #endregion
    #region 增加修改操作
    ProgressConfigEntity AddProgressConfig = new();
    bool _editBoxVisible = false;
    bool _editBoxLoading = false;
    private async Task AddOrUpdateProgress()
    {
        AddProgressConfig.Gname = edgeId;
        await freeSql
        .InsertOrUpdate<ProgressConfigEntity>()
        .SetSource(AddProgressConfig)
        .ExecuteAffrowsAsync();
        await GetPage();
    }
    #endregion
    /// <summary>
    /// 重起进程
    /// </summary>
    /// <param name="progressConfig"></param>
    private void ReStartProgress(ProgressConfigEntity progressConfig)
    {
        MqttClientService.Publish($"EdgeCore/{edgeId}/Progress/AddProgress;{progressConfig.Id}"
        , new ProgressLoginInfo()
            {
                Name = progressConfig.Id.ToString(),
                ClientType = progressConfig.ClientType
            }.ToJson()
        , false);
    }
    /// <summary>
    /// 删除进程
    /// </summary>
    /// <param name="progressConfig"></param>
    private void RemoveProgress(ProgressConfigEntity progressConfig)
    {
        MqttClientService
        .Publish($"EdgeCore/{edgeId}/Progress/RemoveProgress"
        , $"{progressConfig.Id}_{progressConfig.ClientType}"
        , false);
    }

}
<div>
    <Modal Title="添加进程"
           Visible="@_editBoxVisible"
           OnOk="async()=>{
                        _editBoxLoading=true;
                        await AddOrUpdateProgress();
                        _editBoxLoading=false;
                        _editBoxVisible = false;
                   }"
           OnCancel="@(()=>{ _editBoxVisible = false; })"
           ConfirmLoading="@_editBoxLoading">
        <Form Model="@AddProgressConfig"
              LabelColSpan="8"
              WrapperColSpan="16">
            <FormItem Label="进程名">
                <Input @bind-Value="@context.Name" />
            </FormItem>
            <FormItem Label="进程类型">
                <Input @bind-Value="@context.ClientType" />
            </FormItem>
        </Form>
    </Modal>
    <Button OnClick="@(()=>{
                        AddProgressConfig=new();
                        _editBoxVisible = true;
                        })"
            Type="primary"
            Style="margin-bottom:16px">
        添加进程
    </Button>
    <Table TItem="ProgressConfigEntity"
           DataSource="@progressConfigEntities"
           ScrollX="max-content"
           Size="TableSize.Small"
           RowKey="x=>x.Id"
           Loading="@tableLoad">
        <Selection Key="@(context.Id.ToString())" />
        <PropertyColumn Title="名称" Property="c=>c.Name" Sortable />
        <PropertyColumn Title="进程类型" Property="c=>c.ClientType" Sortable />
        <PropertyColumn Title="状态" Property="@(c=>@edgeLoginInfo.ProgressLoginInfos.Any(p => p.ClientId == $"{c.Id}_{c.ClientType}") ? "在线" : "离线")" Sortable />
        <PropertyColumn Title="启用" Property="c=>c.IsUse">
            <Switch Value="context.IsUse"
                    ValueChanged="@(p=>{tableLoad=true;
                                     UpdateIsUse(context,p);
                                     tableLoad=false;
                                     })">
            </Switch>
        </PropertyColumn>
        <PropertyColumn Title="启动时间" Property="c=>GetStartTime(c)" Sortable />
        <PropertyColumn Title="创建时间" Property="c=>c.CreationDate" Format="yyyy-MM-dd HH:mm:ss" Sortable />
        <ActionColumn Title="操作">

            <Space>
                <SpaceItem>
                    <Button Block
                            Type="@ButtonType.Primary"
                            OnClick="@(()=>{NavigationManager.NavigateTo($"/Driver/{edgeId}/{context.Id}/{context.ClientType}");})">
                        编辑设备
                    </Button>
                </SpaceItem>
            </Space>
            <Space>
                <SpaceItem>
                    <Button Block
                            Type="@ButtonType.Primary"
                            OnClick="@(()=>{
                            AddProgressConfig=context.DeepClone();
                            _editBoxVisible = true;
                            })">
                        编辑
                    </Button>
                </SpaceItem>
            </Space>
            <Space>
                <SpaceItem>
                    <Popconfirm Title="确认删除？"
                                OnConfirm="@(async()=>{
                                                 tableLoad=true;
                                                 await Detect(context);
                                                 tableLoad=false;
                                              })">
                        <Button Danger Type="@ButtonType.Primary">
                            删除
                        </Button>
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</div> 